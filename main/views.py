import json 
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from .models import Category, Transaction
from decimal import Decimal, InvalidOperation
from django.db.models import Sum
import random
import string
from django.core.cache import cache
from django.utils import timezone
from datetime import timedelta
from django.contrib.auth.models import User 
from django.core.paginator import Paginator
from django.conf import settings

from django.db.models import Sum, Count, Q
from webpush import send_user_notification
from webpush import send_group_notification
from .models import Note
from django.utils import timezone

def home(request):
    vapid_key = settings.WEBPUSH_SETTINGS.get("VAPID_PUBLIC_KEY")
    return render(request, "main/index.html", {"vapid_key": vapid_key})

@require_POST
def send_note_reminder(request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    try:
        data = json.loads(request.body)
        note_id = data.get('note_id')
        title = data.get('title', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
        content = data.get('content', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        payload = {
            'head': title,
            'body': content[:100] + '...' if len(content) > 100 else content,
            'url': '/',  # URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            'icon': '/static/main/icons/icon-192x192.png',
            'type': 'note_reminder',  # –í–∞–∂–Ω–æ: —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            'noteId': note_id
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ 'all'
        send_group_notification(
            group_name='all',
            payload=payload,
            ttl=1000
        )
        
        return JsonResponse({'success': True, 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'})
        
    except Exception as e:
        return JsonResponse({'success': False, 'error': str(e)})
    



def send_test_push(request):
    payload = {
        "head": "üöÄ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
        "body": "–ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ ‚Äî push —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "icon": "/static/main/icons/icon-192x192.png",
        "url": "/"
    }
    send_user_notification(user=request.user, payload=payload, ttl=1000)
    return JsonResponse({"status": "sent"})




def create_default_categories(user):
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    default_categories = [
        {'name': '–ï–¥–∞', 'icon': 'fas fa-utensils', 'color': '#ef4444'},
        {'name': '–ñ–∏–ª—å–µ', 'icon': 'fas fa-home', 'color': '#10b981'},
        {'name': '–†–∞–±–æ—Ç–∞', 'icon': 'fas fa-briefcase', 'color': '#3b82f6'},
    ]
    
    for cat_data in default_categories:
        Category.objects.get_or_create(
            user=user,
            name=cat_data['name'],
            defaults={'icon': cat_data['icon'], 'color': cat_data['color']}
        )



@login_required
def index(request):
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    create_default_categories(request.user)
    
    categories = Category.objects.filter(user=request.user)
    transactions = Transaction.objects.filter(user=request.user).order_by('-created_at')
    
    # –†–ê–°–ß–ï–¢ –ë–ê–õ–ê–ù–°–û–í –° –£–ß–ï–¢–û–ú –†–ï–ó–ï–†–í–ê
    income_result = transactions.filter(type='income').aggregate(total=Sum('amount'))
    expense_result = transactions.filter(type='expense').aggregate(total=Sum('amount'))
    reserve_result = transactions.filter(type='income').aggregate(total=Sum('reserve_amount'))
    
    income = income_result['total'] or Decimal('0')
    expense = expense_result['total'] or Decimal('0')
    total_reserve = reserve_result['total'] or Decimal('0')
    
    # –û–°–ù–û–í–ù–û–ô –ë–ê–õ–ê–ù–°: –æ–±—â–∞—è —Å—É–º–º–∞ –º–∏–Ω—É—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
    total = income - expense - total_reserve
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    reserve_percentage = request.user.userprofile.reserve_percentage
    target_reserve = request.user.userprofile.target_reserve

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–º –≤—Ö–æ–¥–æ–º (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    is_new_user = request.session.get('is_new_user', False)
    if is_new_user:
        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        request.session['is_new_user'] = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    has_transactions = transactions.exists()

    # –†–ê–°–ß–ï–¢–´ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –†–ï–ó–ï–†–í–ê
    now = timezone.now()
    month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    # –†–µ–∑–µ—Ä–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (—Å—É–º–º–∞ reserve_amount –∑–∞ –º–µ—Å—è—Ü)
    month_reserve_result = Transaction.objects.filter(
        user=request.user,
        type='income',
        created_at__gte=month_start
    ).aggregate(total=Sum('reserve_amount'))
    monthly_reserve = month_reserve_result['total'] or Decimal('0')
    
    # –¢–µ–∫—É—â–∏–π —Ä–µ–∑–µ—Ä–≤ (–æ–±—â–∏–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π) - —ç—Ç–æ total_reserve
    current_reserve = total_reserve
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏
    progress_percentage = 0
    remaining_to_target = target_reserve
    
    if target_reserve > 0:
        progress_percentage = float(min(100, (current_reserve / target_reserve) * Decimal('100')))
        remaining_to_target = max(Decimal('0'), target_reserve - current_reserve)

    return render(request, 'index.html', {
        'categories': categories,
        'transactions': transactions,
        'income': income,
        'expense': expense,
        'total': total,
        'is_new_user': is_new_user,
        'has_transactions': has_transactions,
        'reserve_percentage': reserve_percentage,
        'target_reserve': target_reserve,
        # –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        'current_reserve': current_reserve,
        'monthly_reserve': monthly_reserve,
        'progress_percentage': progress_percentage,
        'remaining_to_target': remaining_to_target,
    })



@login_required
def update_target_reserve(request):
    if request.method == 'POST':
        try:
            target_reserve = request.POST.get('target_reserve')
            if target_reserve is None:
                return JsonResponse({'success': False, 'error': '–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª—å'})
            
            target_reserve = Decimal(target_reserve)
            if target_reserve < 0:
                return JsonResponse({'success': False, 'error': '–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ä–µ–∑–µ—Ä–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = request.user.userprofile
            profile.target_reserve = target_reserve
            profile.save()
            
            return JsonResponse({'success': True})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})
    
    return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞'})





@login_required
def update_reserve_percentage(request):
    if request.method == 'POST':
        try:
            new_percentage = request.POST.get('reserve_percentage')
            if new_percentage is None:
                return JsonResponse({'success': False, 'error': '–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ—Ü–µ–Ω—Ç'})
            
            new_percentage = int(new_percentage)
            if new_percentage < 0 or new_percentage > 100:
                return JsonResponse({'success': False, 'error': '–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100'})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile = request.user.userprofile
            profile.reserve_percentage = new_percentage
            profile.save()
            
            return JsonResponse({'success': True})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})
    
    return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞'})


# views.py - –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é add_transaction
@login_required
def add_transaction(request):
    if request.method == "POST":
        try:
            type_ = request.POST.get("type")
            amount = request.POST.get("amount")
            category_id = request.POST.get("category")
            description = request.POST.get("description", "")

            print(f"=== –î–ê–ù–ù–´–ï –û–¢ –§–û–†–ú–´ ===")
            print(f"Type: {type_}")
            print(f"Amount: {amount}")
            print(f"Category ID: {category_id}")
            print(f"Description: {description}")

            if not type_:
                return JsonResponse({"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏"})
            if not amount:
                return JsonResponse({"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞"})
            if not category_id:
                return JsonResponse({"success": False, "error": "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è"})

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ Decimal
            try:
                amount_decimal = Decimal(amount)
                if amount_decimal <= 0:
                    return JsonResponse({"success": False, "error": "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è"})
            except (ValueError, InvalidOperation):
                return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã"})

            category = Category.objects.get(id=category_id)
            
            # –†–ê–°–ß–ï–¢ –†–ï–ó–ï–†–í–ê
            reserve_amount = Decimal('0')
            if type_ == 'income':
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–∑–µ—Ä–≤–∞ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                reserve_percentage = request.user.userprofile.reserve_percentage
                reserve_amount = amount_decimal * (Decimal(reserve_percentage) / Decimal('100'))
                print(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω —Ä–µ–∑–µ—Ä–≤: {reserve_amount} —Å ({reserve_percentage}% –æ—Ç {amount_decimal})")

            transaction = Transaction.objects.create(
                user=request.user,
                type=type_,
                amount=amount_decimal,
                category=category,
                description=description,
                reserve_amount=reserve_amount
            )
            
            # –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú –ë–ê–õ–ê–ù–°–´ –° –£–ß–ï–¢–û–ú –†–ï–ó–ï–†–í–ê
            transactions = Transaction.objects.filter(user=request.user)
            income_result = transactions.filter(type='income').aggregate(total=Sum('amount'))
            expense_result = transactions.filter(type='expense').aggregate(total=Sum('amount'))
            reserve_result = transactions.filter(type='income').aggregate(total=Sum('reserve_amount'))
            
            income = income_result['total'] or Decimal('0')
            expense = expense_result['total'] or Decimal('0')
            total_reserve = reserve_result['total'] or Decimal('0')
            total = income - expense - total_reserve
            
            # –†–ê–°–ß–ï–¢ –†–ï–ó–ï–†–í–ê –ó–ê –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶
            now = timezone.now()
            month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            month_reserve_result = Transaction.objects.filter(
                user=request.user,
                type='income',
                created_at__gte=month_start
            ).aggregate(total=Sum('reserve_amount'))
            monthly_reserve = month_reserve_result['total'] or Decimal('0')
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            transaction_data = {
                'id': transaction.id,
                'type': transaction.type,
                'amount': float(transaction.amount),
                'reserve_amount': float(reserve_amount),
                'description': transaction.description,
                'created_at': transaction.created_at.isoformat(),
                'category_id': transaction.category.id,
                'category_name': transaction.category.name,
                'category_icon': transaction.category.icon,
                'category_color': transaction.category.color,
            }
            
            return JsonResponse({
                "success": True, 
                "transaction": transaction_data,
                "updated_balances": {
                    "total": float(total),
                    "income": float(income),
                    "expense": float(expense),
                    "total_reserve": float(total_reserve),
                    "monthly_reserve": float(monthly_reserve)  # –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
                }
            })
            
        except Category.DoesNotExist:
            return JsonResponse({"success": False, "error": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {str(e)}")
            return JsonResponse({"success": False, "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

    return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞"})




# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def hello(request):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å—Ä–∞–∑—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ index
    if request.user.is_authenticated:
        return redirect('index')
    return render(request, 'hello.html')

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—á–µ—Ä–µ–∑ AJAX –∏–ª–∏ —Ñ–æ—Ä–º—É)
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)

        if user is not None:
            login(request, user)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            request.session['is_new_user'] = True
            
            if request.headers.get('x-requested-with') == 'XMLHttpRequest':
                return JsonResponse({'success': True})
            return redirect('index')

        # –ï—Å–ª–∏ AJAX ‚Äî –≤–µ—Ä–Ω—ë–º JSON —Å –æ—à–∏–±–∫–æ–π
        if request.headers.get('x-requested-with') == 'XMLHttpRequest':
            return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'}, status=400)

        # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        return render(request, 'hello.html', {'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'})

    return redirect('hello')

# –í—ã—Ö–æ–¥
def logout_view(request):
    logout(request)
    return redirect('hello')

@login_required
def add_category(request):
    if request.method == "POST":
        try:
            name = request.POST.get("name")
            icon = request.POST.get("icon", "fas fa-tag")
            color = request.POST.get("color", "#3b82f6")

            if not name:
                return JsonResponse({"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"})

            category = Category.objects.create(
                user=request.user,
                name=name,
                icon=icon,
                color=color
            )
            
            return JsonResponse({"success": True, "category": {"id": category.id, "name": category.name}})
            
        except Exception as e:
            return JsonResponse({"success": False, "error": str(e)})

    return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞"})

@login_required
def delete_category(request, category_id):
    try:
        category = Category.objects.get(id=category_id, user=request.user)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        transaction_count = Transaction.objects.filter(category=category, user=request.user).count()
        
        if transaction_count > 0:
            return JsonResponse({
                "success": False, 
                "error": f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ ({transaction_count} —à—Ç.)"
            })
        
        category.delete()
        return JsonResponse({"success": True})
    except Category.DoesNotExist:
        return JsonResponse({"success": False, "error": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})

@login_required
def get_categories(request):
    categories = Category.objects.filter(user=request.user)
    categories_data = [
        {
            'id': cat.id,
            'name': cat.name,
            'icon': cat.icon,
            'color': cat.color
        }
        for cat in categories
    ]
    return JsonResponse({"categories": categories_data})


@login_required
def delete_transaction(request, transaction_id):
    try:
        transaction = Transaction.objects.get(id=transaction_id, user=request.user)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        transaction_type = transaction.type
        transaction_amount = transaction.amount
        transaction_reserve = transaction.reserve_amount
        
        transaction.delete()
        
        # –ü–ï–†–ï–°–ß–ò–¢–´–í–ê–ï–ú –ë–ê–õ–ê–ù–°–´ –ü–û–°–õ–ï –£–î–ê–õ–ï–ù–ò–Ø
        transactions = Transaction.objects.filter(user=request.user)
        income_result = transactions.filter(type='income').aggregate(total=Sum('amount'))
        expense_result = transactions.filter(type='expense').aggregate(total=Sum('amount'))
        reserve_result = transactions.filter(type='income').aggregate(total=Sum('reserve_amount'))
        
        income = income_result['total'] or Decimal('0')
        expense = expense_result['total'] or Decimal('0')
        total_reserve = reserve_result['total'] or Decimal('0')
        total = income - expense - total_reserve
        
        # –†–ê–°–ß–ï–¢ –†–ï–ó–ï–†–í–ê –ó–ê –¢–ï–ö–£–©–ò–ô –ú–ï–°–Ø–¶
        now = timezone.now()
        month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
        month_reserve_result = Transaction.objects.filter(
            user=request.user,
            type='income',
            created_at__gte=month_start
        ).aggregate(total=Sum('reserve_amount'))
        monthly_reserve = month_reserve_result['total'] or Decimal('0')
        
        return JsonResponse({
            "success": True,
            "updated_balances": {
                "total": float(total),
                "income": float(income),
                "expense": float(expense),
                "total_reserve": float(total_reserve),
                "monthly_reserve": float(monthly_reserve)  # –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–π —Ä–µ–∑–µ—Ä–≤
            }
        })
    except Transaction.DoesNotExist:
        return JsonResponse({"success": False, "error": "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})



def generate_random_password(length=12):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    characters = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(random.choice(characters) for i in range(length))


def register(request):
    if request.method == 'POST':
        try:
            username = request.POST.get('username', '').strip()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            client_ip = request.META.get('REMOTE_ADDR', 'unknown')
            cache_key = f'registration_limit_{client_ip}'
            
            last_registration = cache.get(cache_key)
            if last_registration:
                time_passed = timezone.now() - last_registration
                if time_passed < timedelta(minutes=2):
                    return JsonResponse({
                        "success": False, 
                        "error": "–° –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –º–æ–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ 60 –º–∏–Ω—É—Ç!"
                    })
            
            if not username:
                return JsonResponse({"success": False, "error": "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω"})
            
            if len(username) < 3:
                return JsonResponse({"success": False, "error": "–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤"})
            
            if User.objects.filter(username=username).exists():
                return JsonResponse({"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
            password = generate_random_password()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.objects.create_user(
                username=username,
                password=password
            )
            
            # –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫—ç—à
            cache.set(cache_key, timezone.now(), 60 * 10)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            create_default_categories(user)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            login(request, user)
            
              # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
            request.session['is_new_user'] = True

            return JsonResponse({
                "success": True, 
                "message": "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                "username": username
            })
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
            return JsonResponse({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {str(e)}"})
    
    return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞"})


@login_required
def change_password(request):
    if request.method == 'POST':
        try:
            new_password = request.POST.get('new_password')
            confirm_password = request.POST.get('confirm_password')
            current_password = request.POST.get('current_password')  # –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–º–µ–Ω—ã
            
            print(f"=== –°–ú–ï–ù–ê –ü–ê–†–û–õ–Ø ===")
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {request.user.username}")
            print(f"–ü–∞—Ä–æ–ª—å —É–∂–µ –º–µ–Ω—è–ª—Å—è: {request.user.userprofile.password_changed}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–µ–Ω—è–ª –ø–∞—Ä–æ–ª—å, —Ç—Ä–µ–±—É–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            if request.user.userprofile.password_changed:
                if not current_password:
                    return JsonResponse({"success": False, "error": "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
                if not request.user.check_password(current_password):
                    return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"})
            
            if not new_password or not confirm_password:
                return JsonResponse({"success": False, "error": "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è"})
            
            if new_password != confirm_password:
                return JsonResponse({"success": False, "error": "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"})
            
            if len(new_password) < 6:
                return JsonResponse({"success": False, "error": "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"})
            
            user = request.user
            user.set_password(new_password)
            user.save()
            
            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–∞—Ä–æ–ª—å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω
            user.userprofile.password_changed = True
            user.userprofile.save()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª—Å—è
            from django.contrib.auth import update_session_auth_hash
            update_session_auth_hash(request, user)
            
            print("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
            return JsonResponse({"success": True, "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"})
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: {str(e)}")
            return JsonResponse({"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: {str(e)}"})
    
    return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞"})


def get_transactions(request):
    filter_type = request.GET.get('filter', 'week')
    page = int(request.GET.get('page', 1))
    limit = int(request.GET.get('limit', 10))
    category_id = request.GET.get('category', 'all')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    now = timezone.now()
    if filter_type == 'day':
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif filter_type == 'week':
        start_date = now - timedelta(days=now.weekday())
        start_date = start_date.replace(hour=0, minute=0, second=0, microsecond=0)
    elif filter_type == 'month':
        start_date = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    else:
        start_date = None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = Transaction.objects.filter(user=request.user)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è
    if category_id != 'all':
        transactions = transactions.filter(category_id=category_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥
    if start_date:
        transactions = transactions.filter(created_at__gte=start_date)
    
    transactions = transactions.order_by('-created_at')
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    paginator = Paginator(transactions, limit)
    try:
        page_obj = paginator.page(page)
    except EmptyPage:
        # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return JsonResponse({
            'success': True,
            'transactions': [],
            'has_more': False
        })
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=400)
    
    transactions_data = []
    for transaction in page_obj:
        transactions_data.append({
            'id': transaction.id,
            'amount': float(transaction.amount),
            'reserve_amount': float(transaction.reserve_amount),  # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤
            'type': transaction.type,
            'description': transaction.description,
            'created_at': transaction.created_at.isoformat(),
            'category_id': transaction.category.id,
            'category_name': transaction.category.name,
            'category_icon': transaction.category.icon,
            'category_color': transaction.category.color,
        })
    
    return JsonResponse({
        'success': True,
        'transactions': transactions_data,
        'has_more': page_obj.has_next()
    })

@login_required
def get_categories_with_stats(request):
    categories = Category.objects.filter(user=request.user)
    
    now = timezone.now()
    month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    total_income = Transaction.objects.filter(
        user=request.user,
        type='income',
        created_at__gte=month_start
    ).aggregate(total=Sum('amount'))['total'] or Decimal('0')
    
    categories_data = []
    for category in categories:
        # –°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –º–µ—Å—è—Ü
        category_expense = Transaction.objects.filter(
            user=request.user,
            category=category,
            type='expense',
            created_at__gte=month_start
        )
        total_expense = category_expense.aggregate(total=Sum('amount'))['total'] or Decimal('0')
        transaction_count = category_expense.count()

        # –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç –æ–±—â–µ–≥–æ –¥–æ—Ö–æ–¥–∞
        percentage = 0
        if total_income > 0 and total_expense > 0:
            percentage = (total_expense / total_income) * 100
        
        categories_data.append({
            'id': category.id,
            'name': category.name,
            'icon': category.icon,
            'color': category.color,
            'expense_amount': float(total_expense),
            'transaction_count': transaction_count,
            'percentage': round(float(percentage), 1)
        })
    
    return JsonResponse({"categories": categories_data})


################# –ó–ê–ú–ï–¢–ö–ò ##############

@login_required
def get_notes(request):
    notes = Note.objects.filter(user=request.user).order_by('-created_at')
    notes_data = []
    for note in notes:
        notes_data.append({
            'id': note.id,
            'title': note.title,
            'content': note.content,
            'reminder_date': note.reminder_date.isoformat() if note.reminder_date else None,
            'is_reminded': note.is_reminded,
            'created_at': note.created_at.isoformat(),
        })
    return JsonResponse({"notes": notes_data})

@login_required
def add_note(request):
    if request.method == "POST":
        try:
            title = request.POST.get("title")
            content = request.POST.get("content", "")
            reminder_date_str = request.POST.get("reminder_date")

            if not title:
                return JsonResponse({"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫"})

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_date = None
            if reminder_date_str:
                try:
                    from datetime import datetime
                    from django.utils import timezone
                    import re
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
                    # –§–æ—Ä–º–∞—Ç: YYYY-MM-DDTHH:MM:SS+HH:MM –∏–ª–∏ YYYY-MM-DDTHH:MM:SS-HH:MM
                    if 'T' in reminder_date_str and ('+' in reminder_date_str or '-' in reminder_date_str):
                        # –≠—Ç–æ –¥–∞—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
                        reminder_date = datetime.fromisoformat(reminder_date_str)
                    else:
                        # –≠—Ç–æ –¥–∞—Ç–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã - —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                        reminder_date = datetime.strptime(reminder_date_str, '%Y-%m-%d %H:%M:%S')
                        # –î–µ–ª–∞–µ–º –¥–∞—Ç—É "aware" —Å —Ç–µ–∫—É—â–∏–º —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
                        reminder_date = timezone.make_aware(reminder_date)
                    
                    print(f"Parsed reminder date: {reminder_date}")
                    print(f"Reminder date timezone: {reminder_date.tzinfo}")
                        
                except (ValueError, TypeError) as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
                    return JsonResponse({"success": False, "error": f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {e}"})

            note = Note.objects.create(
                user=request.user,
                title=title,
                content=content,
                reminder_date=reminder_date
            )

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏
            note_data = {
                'id': note.id,
                'title': note.title,
                'content': note.content,
                'reminder_date': note.reminder_date.isoformat() if note.reminder_date else None,
                'is_reminded': note.is_reminded,
                'created_at': note.created_at.isoformat(),
            }

            return JsonResponse({"success": True, "note": note_data})

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {str(e)}")
            return JsonResponse({"success": False, "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

    return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞"})

@login_required
def edit_note(request, note_id):
    if request.method == "POST":
        try:
            note = Note.objects.get(id=note_id, user=request.user)
            title = request.POST.get("title")
            content = request.POST.get("content", "")
            reminder_date_str = request.POST.get("reminder_date")

            if not title:
                return JsonResponse({"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫"})

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminder_date = None
            if reminder_date_str:
                try:
                    from datetime import datetime
                    from django.utils import timezone
                    import re
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
                    if 'T' in reminder_date_str and ('+' in reminder_date_str or '-' in reminder_date_str):
                        reminder_date = datetime.fromisoformat(reminder_date_str)
                    else:
                        reminder_date = datetime.strptime(reminder_date_str, '%Y-%m-%d %H:%M:%S')
                        reminder_date = timezone.make_aware(reminder_date)
                    
                    print(f"Parsed reminder date for edit: {reminder_date}")
                    print(f"Reminder date timezone for edit: {reminder_date.tzinfo}")
                        
                except (ValueError, TypeError) as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã: {e}")
                    return JsonResponse({"success": False, "error": f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {e}"})

            note.title = title
            note.content = content
            note.reminder_date = reminder_date
            note.save()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            note_data = {
                'id': note.id,
                'title': note.title,
                'content': note.content,
                'reminder_date': note.reminder_date.isoformat() if note.reminder_date else None,
                'is_reminded': note.is_reminded,
                'created_at': note.created_at.isoformat(),
            }

            return JsonResponse({"success": True, "note": note_data})

        except Note.DoesNotExist:
            return JsonResponse({"success": False, "error": "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏: {str(e)}")
            return JsonResponse({"success": False, "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

    return JsonResponse({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞"})

@login_required
def delete_note(request, note_id):
    try:
        note = Note.objects.get(id=note_id, user=request.user)
        note.delete()
        return JsonResponse({"success": True})
    except Note.DoesNotExist:
        return JsonResponse({"success": False, "error": "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})

@login_required
def mark_note_as_reminded(request, note_id):
    try:
        note = Note.objects.get(id=note_id, user=request.user)
        note.is_reminded = True
        note.save()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
        note_data = {
            'id': note.id,
            'title': note.title,
            'content': note.content,
            'reminder_date': note.reminder_date.isoformat() if note.reminder_date else None,
            'is_reminded': note.is_reminded,
            'created_at': note.created_at.isoformat(),
        }
        
        return JsonResponse({"success": True, "note": note_data})
    except Note.DoesNotExist:
        return JsonResponse({"success": False, "error": "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})

def get_pending_reminders(request):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        now = timezone.now()
        reminders = Note.objects.filter(
            reminder_date__lte=now,
            is_reminded=False
        ).select_related('user')
        
        reminders_data = []
        for reminder in reminders:
            reminders_data.append({
                'id': reminder.id,
                'title': reminder.title,
                'content': reminder.content,
                'reminder_date': reminder.reminder_date.isoformat(),
                'created_at': reminder.created_at.isoformat()
            })
            
        return JsonResponse({
            'success': True,
            'reminders': reminders_data
        })
        
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        })